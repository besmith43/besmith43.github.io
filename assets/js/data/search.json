[ { "title": "Introduction to the Rust Programming Language", "url": "/posts/RustIntro/", "categories": "rust", "tags": "", "date": "2022-06-20 18:00:00 -0500", "snippet": "RustLet’s me be transparent. Rust is the latest programming language to catch my eye and solve a problem that I was encountering. As a member of an IT office, it is incredibly helpful to be able to build simple tools to automate common tasks. However, I’m not exactly in a position to go around installing scripting language runtimes on all the machines that I support so languages like Python and Ruby are out of the question. I do tend to use them as proof of concept or to handle things on my personal machines. So for a long time, I had done a significant amount of work in C# to leverage the power of Microsoft’s latest iteration of the .Net runtime in the new cross platform .Net Core and later just renamed to .Net. It was and is a great language and runtime for this effort as I had set the standard that not only did I want to build tools that had no dependencies on the client system, but also that could be built for x86 and arm cpu architectures as well as Windows, MacOS, and Linux from the same dev machine. .Net Core fit this perfectly because of the amazing work that the Microsoft team had put into it, but as with all good things, there were drawbacks. .Net didn’t allow for files, such as images and text files, to be bundled into the completed binary, and even if it had the Microsoft GUI’s didn’t work outside of the Windows platform. For me, the lack of a GUI wasn’t a big deal, but if I’m going to give these tools to others, it’s ideal to have the interface be a graphical one instead of a terminal one. So I kept my eye out for other languages and runtimes that would allow these 2 additional checkboxes until rust came on my radar.Now to actually talk about rust instead of how I got to it. For my purposes, it can be compiled for all 6 of the target architectures and operating systems I’m looking for, as well as bundling in required files into the completed single binary with no runtime dependencies. What makes rust a great investment is it’s ability to morph from a low-level “systems” programming language to a developer friendly high level language, and all the while having memory safety through use of a borrow checker system. This is a section of the compiler that enforces a set of rules on your code to verify that you don’t have any pointer errors like what you’d find in languages such as C or C++ but without a garbage collector. This means, among other things, that nothing is pausing execution of your code at runtime to check for memory allocations that need to be freed. Now don’t be fooled by the marketing of the language, it is not safe. It is merely safer because of these compiler enforced rules. The reason being is quite simple when you pull it back. Rust allows those that know what they’re doing, or at least think they do, to have direct access to pointers all the problems that come with them through the unsafe keyword. This is great for library authors and those who need to use rust at lower levels of abstraction relative to the hardware, but for those like me that need to build applications, I get nearly identical performance characteristics to C or C++ without any of their headaches. I just get the enjoy of all new rustaceans, the name the rust community gave its members, of butting heads with the compiler until I learn the rules through experience. Something that far more experienced programmers have mentioned that rust is unique to them as they feel that they normally need to take 2 passes at a project to get it right. However with rust, they feel like they do it the right way the first time due to the compiler and language features. I personally can say that much, but it definitely is a really confidence building experience with the comfort of the strong type system and the compiler making the computer do what it does best to allow me to focus on the logic and documenting my assumptions in code instead of fritting that the language and runtime are allowing me to misuse something.Rustup and CargoRustup is the main management tool for rust, and cargo is the main build tool. The 2 together with all their different components make for a wonderful and feature rich platform to get up to speed building applications quickly. The icing on top is that both can be extended by the community without needing to go through the central authority of the language maintainers. I’m not saying that because they aren’t great, but the modular design of these tools allows for them to focus on core components while the community is allowed to solve their own problems. Not to compare, but when compared against Microsoft’s .Net project, the community is beholden to the problems that Microsoft’s team wants to solve. While they can build on top of that base, nothing stops Microsoft from breaking it. With rustup and cargo from what I can tell, the core dev teams are only concerned with building out the core functionality and minimum modules to make it work out of the box.Wonderful CLI ToolsCurrently rust is being used to create some of the best cli tools I’ve ever used. For an example, look at ripgrep. It is one of many bash replacements written in rust, that are far superior to the tools that they’re replicating. In some cases, they’re even more user friendly than the original ones written in C.Geared toward helping BeginnersThe community and the maintainers are gearing their efforts toward lower the barrier to entry for newbies to the language. I think that’s a great goal and they’ve done a pretty good job. You can see for yourself with the following resources below:The Rust Language BookCrates.ioAre We Web YetAre We Game YetRust Library SearchConclusionRust is a great language, and I truly believe that it has a really good shot of hitting its goal of being the programming language for the next 50 years. They really want to replace C and from it’s humble side project roots inside Mozilla to topping the Stack Overflow favorite programming language for the last 5 years, I think it has a real chance at it." }, { "title": "Cross Compiling Rust on a MacBook", "url": "/posts/RustCrossCompilation/", "categories": "rust", "tags": "rustup, cross compile", "date": "2022-06-17 18:00:00 -0500", "snippet": "RustupThe main tool for installing rust tools! With it, we can install new “toolchains”. Basically, the parts of the rust compiler needed for platform specific compilation. Unfortunately, because of the way that rust compiles our code into a binary, it needs the appropriate C libraries to be able to produce the final binary that we’ll run on a client computer. In this post, we’ll discuss how to setup your MacBook to target several prominent architectures and platforms.Quick Refresher on Compiling Programs in RustRust is an llvm based language and what that means is that the rustc compiler compiles our rust source files down to llvm-ir. IR in this context stands for intermediate representation. Then the normal llvm compilers take that output and compiles it down to architecture specific assembly. Once it becomes assembly, a linker goes through, links all the files together and then compiles it down to both a platform and architecture specific machine code that we refer to as a binary. This binary file is our application in a runnable state that we can distribute to others.Installing RustupFirstly we’ll need to get rustup install on our MacBook. This can be done by going here, and running the command they have in your terminal.Mac x86Now that we have Rustup installed, let’s look at the simplest target for cross compiling our rust programs, Intel equipped Macs. First we’ll need to install the rust toolchain for it with the following command:rustup target add x86_64-apple-darwinNow we have everything installed, and we just need to tell cargo to use the new tooling. To do so for each build run cargo like so:cargo build --target x86_64-apple-darwinHowever that is a lot to type every time and we like being lazy. So how can we tell cargo to build a particular project without having to type in the target option every time? Make a config file. This file needs to be in a .cargo folder within the same directory as the Cargo.toml file, and you’ll need to put the following text in a config file within it.[build]target = &quot;x86_64-apple-darwin&quot;To test that these compiles actually worked, let’s make use of the file command. In case you aren’t already familiar with it, the file command will tell you what kind of file you pass it. When it comes to binaries, it will tell us the cpu architecture and operating system that a binary was compiled for. We can use file to check our binaries with the following:file ./target/x86_64-apple-darwin/debug/&amp;lt;program binary&amp;gt;We should get the following output:target/x86_64-apple-darwin/debug/&amp;lt;program binary&amp;gt;: Mach-O 64-bit executable x86_64The next thing to do would be to move this file to an Intel processor equipped mac and run it.Windows x86What most have probably come here for, let’s up the difficulty to one of the most common platforms, Windows running on Intel and AMD processors. To get started, you’ll need to install mingw-w64. I personally use Homebrew. With it, I can run the following command to install mingw-w64:brew install mingw-w64Then we’ll need into install the rust toolchain. To do that run the following:rustup target add x86_64-pc-windows-gnuThen to compile the program with the following:cargo build --target x86_64-pc-windows-gnuLike with the Intel Macs, we can make a config file if the project needs to default to build for the Windows x86 platform.[build]target = &quot;x86_64-pc-windows-gnu&quot;[target.x86_64-pc-windows-gnu]linker = &quot;x86_64-w64-mingw32-gcc&quot;This config file is telling cargo that the build process needs to use the Windows options and that the linker is mingw32’s version of gcc. Now you don’t have to use the build section, but the linker section is required. Otherwise, cargo will give you an error that effectively means that it doesn’t have a compile toolchain to compile for the Windows platform.Now to check that the binary created shows as a Windows file. The file command’s output should look something like the below.target/x86_64-pc-windows-gnu/debug/&amp;lt;program binary&amp;gt;.exe: PE32+ executable (console) x86_64, for MS WindowsWindows Arm64As of the time of writing this, rustc doesn’t have a toolchain for arm64 Windows gnu. It only has a toolchain for arm64 Windows msvc. Msvc is the Microsoft Visual C compiler. It’s a series of libraries and tools to build Windows native progresses. It’s also a runtime library that needs to exist on a client system. However, mingw is the gnu project’s open source and non-Microsoft C compiler that we can use on MacOS and Linux to make Windows binaries. Until the toolchain is built to target Windows on arm64 within rust using mingw, we have to make Windows on arm64 binaries natively on Windows.Linux (Both Arm64 and x86)For Linux, we build both arm64 and x86 Linux binaries from our Macs without the need for a virtual machine just like we did with Windows x86 binaries. To get started, we’ll need to install compilers, and again I’m using homebrew to do this.brew tap messense/macos-cross-toolchainsbrew install x86_64-unknown-linux-gnubrew install aarch64-unknown-linux-gnuWhere this differs from before with Windows, you’ll need to add the following 4 lines to your shell’s configuration files.# needed to compile for x86 architectureexport CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gccexport CXX_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-g++export AR_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-arexport CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc# compile rust applications for arm64 linuxexport CC_AARCH64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gccexport CXX_AARCH64_unknown_linux_gnu=aarch64-unknown-linux-gnu-g++export AR_AARCH64_unknown_linux_gnu=aarch64-unknown-linux-gnu-arexport CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-unknown-linux-gnu-gccNow like before we need to install the appropriate rust toolchains like so:rustup target add x86_64-unknown-linux-gnurustup target add aarch64-unknown-linux-gnuFollowing these commands, we can build applications for Linux operating systems on both arm64 and x86 cpu architectures out of our rust projects. This can be done with the cargo build options.cargo build --target x86_64-unknown-linux-gnucargo build --target aarch64-unknown-linux-gnuYou can also do the .cargo/config file with the following content:[build]target = &quot;x86_64-unknown-linux-gnu&quot;For the file commands outputs, they should look something like the following examples:target/x86_64-unknown-linux-gnu/debug/&amp;lt;program binary&amp;gt;: ELF 64-bit LSB pie executable, x86_64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.16, with debug info, not strippedtarget/aarch64-unknown-linux-gnu/debug/&amp;lt;program binary&amp;gt;: ELF 64-bit LSB pie executable, ARM aarch64, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-aarch64.so.1, for GNU/Linux 3.7.0, with debug info, not strippedChecking the Assembly and LLVM-IROne of the fun things that cargo can do is output the assembly code and LLVM-IR that it generates to a file. This can be a good way to debug, if that becomes necessary, or to compare our cross compilation work. To output those intermediate formats to file, you can use the following commands:cargo rustc -- --emit asmcargo rustc -- --emit llvm-irThe output of these commands are stored in &amp;lt;program-name&amp;gt;.s and &amp;lt;program-name&amp;gt;.ll files respectively and are found at target/x86_64-pc-windows-gnu/deps. When you look for a build on the native platform, you’ll need to look at target/debug/deps for the same assembly, llvm-ir, and binaries we’ve discussed all throughout this article.ConclusionThis is a solid start to cross compilation with rust from a Mac. One last bit of wisdom is to use rustup to list all of the install toolchains on a system.rustup target listEnjoy your new found knowledge of Rust!Reference LinksStack-Overflow: cross compiling from macos to windows with rustGithub Gist: MefistophellRustup Book: ToolchainsRustup Book: ComponentsGithub: Messense/homebrew-macos-cross-toolchainsStack Overflow: how can i cross compile rust code into intel assembly on an arm m1 apple siliconPatrik Svensson: targeting arm for windows in rust" }, { "title": "Getting Started with Vim", "url": "/posts/VimGettingStarted/", "categories": "vim", "tags": "", "date": "2022-06-09 18:00:00 -0500", "snippet": "How to Quit?Because Vim is a modal editor, the first question to answer is how to close it. It’s kind of a meme at this point. However you can close vim by pressing “:q” followed by the enter key. This only works if you are in “Normal” mode. Vim has 4 primary modes: Normal, Insert, Visual, and Command. Normal is the default mode and the one that you should spend the most time in. Insert is the mode where the keyboard works like normal and inserts text into your file. Visual is the mode where you can highlight text to copy or delete the highlighted content. Command is the mode where you either give Vim commands or the environment. By pressing the colon while in normal mode, you switch to command mode, and the “q” in the original example is a shortcut for the quit command.Basic NavigationWhile keeping within normal mode, you can move around the file without the arrow keys. The replication of the arrow keys are ‘h’, ‘j’, ‘k’, and ‘l’ which are left, down, up, and right respectively. However that’s not very different from a normal editor. So what gives? This is merely step one on the way to a fully, and I truly mean fully, customizable text editor.However lets go to step 2 with some more movement commands. You can press ‘w’ to jump the cursor forward by a word. Then there’s ‘b’ to jump the cursor back by a word. Furthermore, you can search by typing ‘/’ followed by the text that you want to search for. Then press enter to jump to the first instance below the cursor’s current location. Then you can press ‘/’ and enter to jump to the next one.Insert ModeWith Insert mode, there are alot of different ways to get into it, but the basic way to get into Insert mode press ‘i’. While in insert mode, you can type into your file like you normally would. Press the escape key to get back to normal mode. I personally end up remapping escape to my caps lock key on my computers for this reason alone. I also never use caps lock, so it doesn’t tend to bother me much. Some other ways to get into Insert mode are by using ‘A’ or ‘I’. These allow you to go into insert mode at the end or beginning of the current line respectively. There are many other ways to get into and out of Insert mode. These will get you started until you get more muscle memory.Visual ModeVisual mode isn’t something that I use very often, but it is great when you need it. I’m still relatively new with vim, as I’m been using it on and off for about 4 years now. However Visual mode allows you to highlight text. Once highlighted, you can copy, or delete it. To delete, you’ll need to press the ‘d’ key, and to copy you’ll need to press the ‘y’ key. Then to paste, you can press the ‘p’ key. However if you have multiple lines selected, you can press shift + ‘i’ and get into an insert mode that will apply you edits to all selected lines.ConclusionThis is only the beginning of your journey with Vim should you choose to undergo it. While it takes time and requires more than a fair bit of effort to develop the muscle memory to get up to speed, it is well worth it. As the old saying goes, anything worth having takes time and effort to obtain.Vim Chart Key Mode Action h normal move the cursor left l normal move the cursor right j normal move the cursor down k normal move the cursor up w normal jump the cursor forward by a word b normal jump the cursor back by a word i normal enter insert mode at the cursor’s current location A normal move cursor to the end of the line and enter insert mode I normal move cursor to the beginning of the line and enter insert mode escape insert or visual enter normal mode from insert or visual d normal or visual delete character under the cursor or the selected text y visual copy the highlighted text p normal paste the copied text v normal enter visual mode at the cursor’s current location : normal enter command mode, followed by the command that you’d like to run " }, { "title": "Vim All the Things", "url": "/posts/VimAllTheThings/", "categories": "vim", "tags": "", "date": "2022-05-29 18:00:00 -0500", "snippet": "What is Vim?Vim is a modal text editor. One of the things that makes this complicated user interface great is that it allows the user to capitalize on letting the computer do alot of work for you while keeping your hands on the keyboard’s home rows as much as possible. It’s a command line application by design and therefore doesn’t come out of the box with support for a mouse. Thus you can’t/shouldn’t need to leave the keyboard to select something with your mouse. As you get more used to this workflow, it becomes very difficult not to want to use this same modal and keyboard approach to using the computer with everything like web browsers, file browsers, email clients, and all kind of other applications.What are the advantages of using Vim?As an IDE (or Integrated Development Environment), it is endlessly customizable. That goes for everything from what keybindings trigger what actions, to custom actions, to having actions run automatically based on predefined environmental conditions. Vim allows you to put work into configuration and get real world benefits where the only limitation is your willingness to work at it. For example, I have set a custom function that will build the current project that I’m working on. This is a feature of any IDE so it’s nothing special and the fact that vim doesn’t have this out of the box should be a negative point against it. Right? To me, absolutely not. I got to build the build system so that it works the why I want it to, and can handle whatever build process I want. Not what the IDE’s designers had in mind. It also allows me to embed my own assumptions into the development environment. So for example, if I wanted to have a custom run.sh script to handle special builds, all I have to do is add in an if statement to check for a run.sh file, and of it exists, run it. Is this possible in normal IDE’s? Probably. But that vim spends its development time on supporting the plugin ecosystem and making the experience of editting text as good as it can, they aren’t wasting time trying to handle every usecase possible. That becomes the job of each user trying to use vim. It can grow and change as you do, when you want it to and how you need it to. Not how the devs think you should.Is Vim Really Faster?As you get better, the answer is most certainly yes. However, that will take some time to achieve. I’ll use myself as an example. I’ve been using vim on and off for the last 4 years. I’m learning new things all the time and have achieved various levels of speed increases during that time. Though I’m still very much new to the whole thing at the end of the day. So far I’ve got vim configured pretty much on par or better than any IDE that I’ve tried, vifm (aka vim file manager) in the extreme early stages of adaption, and vimari (vim like extension for Safari) and vimium (another vim like extension for Chrome, Firefox, and Edge). The only missing application to get the vim treatment is my email client but as Apple’s mail app and Outlook are rather large applications in their own rights, I don’t think I’m going to try and shoehorn in vim keybindings into them.Applying Vim to other ApplicationsIf you’re on Linux, it’s quite common to have a terminal application call vim, or another terminal editor based on your settings, to modify text. Sometimes the text is a bash command like zsh shell’s vim-mode or writting an email with mutt, a terminal email client. However outside of the terminal, it’s quite common to find vim shortcut plugins for things like web browsers, and gui code editors, like Visual Studio and Jetbrain’s line of IDE products. I personally use Vimari on Safari and Vimium on Microsoft Edge to navigate through web pages without ever needing to touch my mouse. It doesn’t work on every website, but it does allow me to be faster or just not moving my hands away from the keyboard.Concluding ThoughtsI encourage you to watch some videos on youtube and get a feel for how it works. Once you get over the beginning stages, it can be a work life changing experience. I just realized that I forgot about the macro system entirely, but that’s alright because I entend to have more posts discussing vim, so you’ll just have to what and see how that works." }, { "title": "Break and Continue Keywords in .Net Core", "url": "/posts/break-continue/", "categories": "c#", "tags": "", "date": "2020-06-27 18:00:00 -0500", "snippet": "BreakBreak is a keyword that we&#39;ve seen already with switch statements previously, but what if I told you that you can use break in any loop? Well the first question that may come to mind is why would you want to use it in a loop like a for or a while loop? Additionally you may be asking what does break even do in that context? Both are good questions and very reasonable reactions as up to this point, we have only talked about break using used to end a selected case from a switch statment. However in a loop, it ends execution of the loop. So for example, if we have a while loop that would run 5 times, but add in an if statement that has a break inside its code block, then if the condition for the if statement is true on say the third loop, the while loop would not run the 2 additional times. This can be very useful to speed up execution by not running needless loops if the purpose of the loop has been accomplished. Let&#39;s take a look at what this example would look like in C# code.int num = 0;while (num &amp;lt; 5){ Console.WriteLine(&quot;Running contents of while loop&quot;); if (num == 3) { Console.WriteLine(&quot;If statement is true, and now exiting the while loop&quot;); break; }}Now in this example we&#39;re using a new comarison operator that we haven&#39;t seen before, the equal sign. So far we&#39;ve used the equal sign to mean value assignment, however in most programming languages and particular to our purposes this is the case for C#, but a double equal sign is the equal operator. So the if statement&#39;s conditional is checking to see if the variable, num, equals 3. Though the example above is a little pointless, it does demonstrate the utility of the break keyword. This can be used to break out of an intentional infinite loop, or a variety of other use cases.ContinueContinue is a variation break, so where break exits the loop. Continue instead ends that current iteration of the loop, and returns to the conditional. So let&#39;s say that you wanted to only run a loop on the odd iterations and not the even ones. One way to accomplish this would be to have an if condition statement that used an arithmetic operation called modulo. This operation is basically a division operation that returns the remainder and not the quotion of the dvision. Therefore any iteration that would be evenly divisible by 2 would be even and thus skipped while every odd iteration would not return 0 and be executed.for (int i = 1; i &amp;lt; 10; i++){ if (i % 2 == 0) { continue; } Console.WriteLine($&quot;{i} is an odd number&quot;);}ConclusionThese 2 keywords can be very important when determining the flow of code execution and are useful utilities to have when you need to divert from the normal flow of execution.– Program.cs –using System;namespace DNC_Break_Continue{ class Program { static void Main(string[] args) { int num = 0; while (num &amp;lt; 5) { Console.WriteLine(&quot;Running contents of the while loop&quot;); num++; if (num == 3) { Console.WriteLine(&quot;If statement is true, and now exiting the while loop&quot;); break; } } for (int i = 1; i &amp;lt; 10; i++) { if (i % 2 == 0) { continue; } Console.WriteLine($&quot;{i} is an odd number&quot;); } Console.ReadLine(); } }}GitHub Repo" }, { "title": "Branching in .Net Core", "url": "/posts/branching-in-c/", "categories": "c#", "tags": "", "date": "2020-06-27 18:00:00 -0500", "snippet": "BranchingWhat is branching? Basically it is the name give to the broad classification of operations that a computer uses to make decisions. Because a computer can really only move where data is stored and arithmetic, branching is decision making through arithematic. Essentially the computer takes 2 pieces of data, say for example 3 and 5, and subtracts 3 from 5. Then it looks a some special flags based on the result, and finally choices to go down path A or path B.If/ElseIn dotnet core and most programming languages, there are a few basic keywords to be familiar with for most decision making needs. The first and maybe the most used is If/Else. This does exactly what you would expect. If the statement is true, do what is within the If block, but if the statement is false, do what is within the else block. Let&#39;s take a look at a simple example.if (3 &amp;lt; 5){ Console.WriteLine(&quot;3 is less than 5&quot;);}else{ Console.WriteLine(&quot;3 is greater than 5&quot;);}Let&#39;s take a look at what&#39;s happening in this code snippet. Effectively, the processor is being asked is 3 less than 5? The processor then does some arithmetic and decides that it is a true statement. Because it is true, the code with the first curly bracket is run and everything below that is skipped. If some whatever reason the laws of math changed and 3 became greater than 5 or the numbers order was switched, then the code within the curly bracket pair under else would be run and the first pair would be skipped. Now this example isn&#39;t very useful as it is what&#39;s called hard coded. This means that the decision will never change as it will always be a true statement. There are times when you would want such a thing but not with if statements.There is another keyword to be familiar with when it comes to If/Else statements, and that is the “else if” statement. This works exactly as you&#39;d expect, but let&#39;s see it in a more realistic situation.int a = 3; int b = 5; if (a &amp;lt; b) { Console.WriteLine($&quot;{a} is less than {b}&quot;); } else if (a &amp;gt; b) { Console.WriteLine($&quot;{a} is greater than {b}&quot;); } else { Console.WriteLine($&quot;{a} and {b} are equal&quot;);}Here we&#39;re seeing a code snippet that when executed will output 3 is less than 5, because it again entered the first if statement. It will do this everytime because 3 will always be less than 5 and that comparison will happen before the other 2 are checked. It is suggested to always have an else, but it is not mandatory. You can also use as many else if&#39;s as you need to take care of the decision tree that you need to. It is also acceptible to embed if&#39;s within if&#39;s. However I would be careful as you want to make sure that you keep your code easy to reason through.SwitchMuch like If/Else, switch statements are effectively a specific If/Else decision tree. With a switch, it is given a single variable, and then depending on the value stored within that variable, a particular code block is selected, and if it is not any of the specific options, it is good coding practice to have a default code block. This default is the switch equivalent of an else statement. Each code block is ended with a break keyword. This keyword can be used in any code block to stop the flow of execution of that code block. We&#39;ll discuss this further in a later post.int choice = 2; switch (choice) { case 1: Console.WriteLine(&quot;The Choice was 1&quot;); break; case 2: Console.WriteLine(&quot;The Choice was 2&quot;); break; default: Console.WriteLine(&quot;The Choice wasn\\&#39;t 1 or 2&quot;); break; }While LoopsWhile loops ae pretty simple but incredibly useful. At the top of the loop is a condition check, then the block of code to be run as long as that condition is true. Let&#39;s take a look at one.int count = 0; while(count &amp;lt; 5) { Console.WriteLine($&quot;The count is {count}&quot;); count++; }Sometimes you need to go through the code block once before the condition check happens. To accomplish this, you can use a do while loop. Basically you&#39;ll start the code block with a do keyword instead of the while keyword and condition, and finish the code block with the while keyword and condition statement.int count = 0; do { Console.WriteLine($&quot;The count is {count}&quot;); count++; } while(count &amp;lt; 5);For LoopsFor loops are a concise way to interate a defined number of times. Like with the previous while loop examples, there is a defined format to be followed. It works by declaring a new variable, then setting the truth condition, and then the modification operation that needs to happen between each loop. Seeing is simpler than explaining.for(int i = 0; i &amp;lt; 5; i++) { Console.WriteLine($&quot;The count is {count}&quot;); }ForeachUp to this point all of the different loop examples have done the same thing. They&#39;ve outputed a sentence 5 times with the current count. A ForEach loop can do this same thing but in a fundamentally different way. Before we had a variable keeping up with a count that got updated at the end of each loop. However a ForEach loop, it will iterate over a collection of items. An example of this would be to have an array of items, and perform the instructions given in the code block on each of them. This can be a handy way to work with a a collection of items in a unified fashion.int[] numbers = new int[] {0, 1, 2, 3, 4}; foreach (number in numbers) { Console.WriteLine($&quot;The count is {number}&quot;); }ConclusionThis is an introductory list of some of the most commonly used branching instructions used in programming. Keep in mind that all of them can be used interchangably, but they are each geared differently. I encourage you to play with each of them and get familiar with them.– Program.cs –using System;namespace DNC_Branching{ class Program { static void Main(string[] args) { Console.WriteLine(&quot;If/Else Statement\\n&quot;); int a = 3; int b = 5; if (a &amp;lt; b) { Console.WriteLine($&quot;{a} is less than {b}&quot;); } else if (a &amp;gt; b) { Console.WriteLine($&quot;{a} is greater than {b}&quot;); } else { Console.WriteLine($&quot;{a} is equal to {b}&quot;); } Console.WriteLine(&quot;\\n\\nSwitch Statement Block\\n&quot;); int choice = 2; switch(choice) { case 1: Console.WriteLine(&quot;the Choice is 1&quot;); break; case 2: Console.WriteLine(&quot;The Choice is 2&quot;); break; default: Console.WriteLine(&quot;The Choice was not 1 or 2&quot;); break; } Console.WriteLine(&quot;\\n\\nWhile Loop\\n&quot;); int count = 0; while (count &amp;lt; 5) { Console.WriteLine($&quot;The count is {count}&quot;); count++; } Console.WriteLine(&quot;\\n\\nDo-While Loop\\n&quot;); count = 0; // can&#39;t redeclare a variable, so I am just resetting the value to zero do { Console.WriteLine($&quot;The count is {count}&quot;); count++; } while(count &amp;lt; 5); Console.WriteLine(&quot;\\n\\nFor Loop\\n&quot;); for (int i = 0; i &amp;lt; 5; i++) { Console.WriteLine($&quot;The count is {count}&quot;); } Console.WriteLine(&quot;\\n\\nForEach Loop\\n&quot;); int[] numbers = new int[] {0, 1, 2, 3, 4}; foreach (int number in numbers) { Console.WriteLine($&quot;The count is {number}&quot;); } Console.ReadLine(); } }}Github Repo" }, { "title": "Functions in .Net Core", "url": "/posts/DNC_Functions/", "categories": "c#", "tags": "", "date": "2020-06-27 18:00:00 -0500", "snippet": "What are Functions?Put simply, a function is a collection of instructions under a specified name, but what do I mean by that and why should you care? Well functions serve 2 main purposes in programming. The first is to group repeated instructions together so that when you need to modify how it works, you don&#39;t need to make the same modification 15 or more times. This is referred to as a part of the maintainability of a code base. The second part is that we can name the collection something meaningful to the task that it&#39;s performing. This is referred to as a part of the readability of a code base.&amp;lt;\\p&amp;gt;When should I use a Function?Now some people will tell you that if you are writing more than 4 lines of code, it should be in a function. I&#39;ve heard it before and I understand the idea behind it, but I find that determining when to and when not to use a function is down to 2 things: the complexity of the code, and the bulk of it. For example, if there is a couple lines of code that don&#39;t immediately make sense when I look at it, I&#39;ll put it into a function so that I can name the action being taken. Even if the code is only used once. That way, I know exactly where a chunk of code is when I need to modify it, but also so that I can abtract that complexity away and replace it with an easily understood name. Another name is when it&#39;s simply alot of code. I&#39;ll put that into a function or several functions so that I dont have to at line after line of code, but instead easily disgustable function names. One of the things that you may have noticed is that I&#39;m talking about the naming portion of functions quite a bit, and you&#39;d be right. Part of the complexity of programming is the organization that it takes to set the order of operations properly to achieve the desired effect, but also to manage that complexity through abstracting it away into easier to flow chucks. As projects get larger, it is beneficial to be able to trust your abstractions and keep the eagle&#39;s eye view in your head as opposed to having to keep each and every detail.How do I make a Function?This part is pretty easy. There are 2 parts of a function: the function declaration, and the body of the function. The body of the function is something that we&#39;re already familiar with as it is a curly brace, {}, with lines of code inside just like the loops that we&#39;ve dealt with already. The function declaration, on the other hand, is made up of 5 parts: the scope of who can use the function, the type of function that it is, the return type, the function name, and the parameters. For the scope, at the moment everything will be public, but a function can be private, or protected, and we&#39;ll look at what those mean when we look at classes. The type of function will be important later but for now they&#39;ll be static functions. The return type is what type of value does the function return. This could be an integer, or a string, but in the event that it doesn&#39;t return a value, then the return type is void. The function name is just that. Its name. The parameters are the values that it needs to do its job. Now keep in mind that the names of the parameters only matter within the function as we declare it. Because of this, you don&#39;t need to worry about what the variables are named when you&#39;re calling the function.– Program.cs –using System;namespace DNC_Functions{ class Program { static void Main(string[] args) { int num1 = 3; int num2 = 5; int num3 = add(num1, num2); Console.WriteLine($&quot;The total is {num3}&quot;); int answer = getUserChoice(); Console.WriteLine($&quot;You chose {answer}&quot;); } public static int add(int a, int b) { return a + b; } public static int getUserChoice() { int choice; Console.WriteLine(&quot;Pick a number between 1 and 10&quot;); string user_input = Console.ReadLine(); try { choice = Int32.Parse(user_input); } catch { choice = 0; } return choice; } }}Github Repo" }, { "title": "Variables in .Net Core", "url": "/posts/DNC_Variables/", "categories": "c#", "tags": "", "date": "2020-05-25 18:00:00 -0500", "snippet": "What are Variables?Variables are the containers that we use as programmers to store information. That information can be as simple and small as a number or a character to as large as a game engine or movie with everything inbetween. Let&#39;s look at some of the primitive variable times.What are the different types of variables?Firstly let&#39;s explain what primitives are. In computer science, primitives are the simplist data types available. These data types are variable types like Integers, Characters, Floats, Doubles, Booleans, Strings, and Arrays. This isn&#39;t necessarily all primitives, but these are alot of the common ones. So let&#39;s look at each one of them. Integers: These are whole numbers that can be zero or negative. Doubles: These are decimal numbers such as 3.5 or 5.0. Floats: These are doubles with a higher level of precision such as 3.5000005. Booleans: This variable type is just true or false. The perfect example of simplicity. Characters: These are individual letters, numbers, or special characters. Strings: These are a series of characters, typically an array of characters. Arrays: These are an ordered collection of a singular datatype. Strongly Typed vs Weakly Typed“What is all of this strong and weak stuff?” you may be asking. Well it is a simple explanation that comes with a very long conversation. Quickly put, strongly typed variables are variables that have to be declared at the point that it is created and will never be changed for the life of that object. Therefore a variable that is declared to be an integer will only hold integers until the variable is deleted. You&#39;ll never be able to put a letter into this integer variable. However in a weakly typed language, you don&#39;t need to declare the variable type at the point of creation because the variable can have a string when it&#39;s created, and later store an integer. C# is a C based language and because of that a variable will get declared at creation and remain so until it&#39;s deleted. C# does come with a nice keyword to skill having to write alot of variable declaration. That keyword is var. With var, when a function returns a value, you can declare a new variable with var as the data type and then you as the programmer don&#39;t need to write a long variable datatype." }, { "title": "Wifi Register", "url": "/posts/WifiRegister/", "categories": "python", "tags": "", "date": "2020-05-18 18:00:00 -0500", "snippet": "ProblemThe internet has become and important part of modern life, and with that comes the persistent question from house guests: “What&#39;s the wifi password?” It can be annoying both as the host and the guest. Now some people will simply post their wifi password within sight of the door so that there&#39;s no need to ask. However let&#39;s see what programming can do for us?Proof of ConceptSo let&#39;s look at how Windows manages wifi profiles. This can be seen using the command line. So pull up an administrative console, and run the following command: netsh wlan show profiles.For my laptop, it only has my home network so that makes it pretty simple. Now I just need to export it to a file with the following command: netsh wlan export profile &quot;NERD HOUSE_5G&quot; key=clear folder=C:\\. This will put an xml file at the root of your C drive, and this xml file contains all the information for your wifi connection that Windows stores. Now that we&#39;ve exported it, we&#39;ll need to add the contents of this file to a python script so that it can write that data to a file, then call CMD or powershell to import it onto another computer. To do this, we&#39;ll need to start a new python file with a shebang, an import statement for the os library, and the open function to create a new file of a given name in write mode.#!/usr/bin/env python3import osfile = open(&quot;home-wifi.xml&quot;,&quot;w&quot;)Then open the xml file, select all of it&#39;s contents, copy them, and paste them into the python script file. Now before each line of the xml&#39;s data, we&#39;ll need to write file.write(“, and end each line with \\n”). This is rather tedious but lets see what we&#39;re actually doing with this. So file is the name of the variable that we named earlier for a new file. The .write is calling a write function to place the text passed to the function into the file. At the end of each line we&#39;re adding a \\n then closing the double quotes and parathesises. But what is this \\n? Well it is a carriage return. It is a special symbol that means new line. Now we need to close the file by putting in file.close(). The final section of code will get the current path, call powershell to run the proper command to import our xml file, and delete the xml file.cur_path = os.getcwd()os.system(\\&#39;powershell.exe netsh wlan add profile filename=&quot;\\&#39; + cur_path + \\&#39;\\home-wifi.xml&quot;\\&#39;)os.remove(&quot;home-wifi.xml&quot;)So how does this code work? We know what it is supposed to do, but let&#39;s break it down a bit. We&#39;re storing the current working directory, or cwd, into the variable cur_path. It&#39;s done by calling the os library module and using one of its functions called getcwd(). Then we&#39;ll use the os module again but call the system function. This function is how we interact with the host operating system. In this case, we&#39;re calling powershell, and telling it to run the command netsh wlan add profile. The plus sign in this instantance isn&#39;t performing arithmetic addition but instead it&#39;s performing string concatentation. So what&#39;s a string you may be asking? Well it is a type of data that is a series of characters. It also doesn&#39;t have a specific length. Finally after powershell finishes running, the next line of code will execute. In this case, that is the os module deleting the home-wifi.xml file that we spent so much time working with already.SolutionNow that we have a functional proof of concept for Windows, how about MacOS or Linux? Also how are we going to package this so that we can give something simple to our guests? Well, let&#39;s start off by making everything we&#39;ve done so far a part of a function called def Run_Windows():. Then we&#39;ll have to figure out how to do the same for MacOS and Linux, but also how do we have python check which platform we&#39;re on?MacOSFor MacOS, we need to make a bash script by calling file = open(“home-wifi.sh”,”w”), and fill it with the following.#!/bin/bash networksetup -setairportnetwork en0 SSID_OF_WIRELESS_NETWORK WIRELESS_NETWORK_PASSPHRASENow here SSID_OF_WIRELESS_NETWORK is the name of your wifi, so like in Windows, mine was NERD HOUSE_5G. The WIRELESS_NETWORK_PASSPHRASE is the password. Now we can write this content into our home-wifi.sh file in a single command, like so.file.write(&quot;#!/bin/bash\\n\\nnetworksetup -setairportnetwork en0 SSID_OF_WIRELESS_NETWORK WIRELESS_NETWORK_PASSPHRASE&quot;)Now we need to close the file, make it executable, run the script, and then delete it. This can be done with the below python instructions.file.close()cur_path = os.getcwd()os.system(&quot;chmod +x &quot; + cur_path + &quot;/home-wifi.sh&quot;)os.system(cur_path + &quot;/home-wifi.sh&quot;)os.remove(&quot;home-wifi.sh&quot;)The new bits here are things like making it executable, and how we&#39;re running the command. Where with windows, we used powershell to run the command. In MacOS, we are using the shebang to have MacOS determine to run our script through bash, or the bourne again shell.LinuxFor Linux, we&#39;ll be doing the same thing, but changing the command used in the bash script.#!/bin/bash iwconfig wlan0 essid NETWORK_NAME key WIRELESS_KEYFor this command, NETWORK_NAME is the name of your wifi, and WIRELESS_KEY is the password.Determining What is the Current Operating SystemSo to determine, what the current operating system python is running on, we&#39;ll need the sys module. Specifically the platform function of the sys library. We&#39;ll use the below code block to run the correct function.import sys cur_os = sys.platform() if cur_os == &quot;win32&quot;: Run_Windows()elif cur_os == &quot;darwin&quot;: Run_MacOS()elif cur_os == &quot;linux&quot;: Run_Linux()else: print(&quot;this is an unsupported operating system&quot;)ConclusionFinally, we need to use pyinstaller to make the script into an executable. Now with pyinstaller, the script will need to be feed to pyinstaller on a computer of each operating system. That is its major limitation. However once, completed, you&#39;ll have a single file that can be dropped onto any guest computer and run to add your wifi to a guest computer. Realistically speaking this isn&#39;t the most practical thing, but if you have a complex password or need to setup wifi onto a large number of computers like in a business environment. This type of solution can be quite handy.####–register-wifi.py–#!/usr/bin/env python3import osimport sysdef Run_Windows(): file = open(&quot;home-wifi.xml&quot;,&quot;w&quot;) file.write(&quot;&amp;lt;?xml version=\\&quot;1.0\\&quot;?&amp;gt;\\n&quot;) file.write(&quot;&amp;lt;WLANProfile xmlns=\\&quot;http://www.microsoft.com/networking/WLAN/profile/v1\\&quot;&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;name&amp;gt;Nerd House_5G&amp;lt;/name&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;SSIDConfig&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;SSID&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;hex&amp;gt;4E65726420486F7573655F3547&amp;lt;/hex&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;name&amp;gt;Nerd House_5G&amp;lt;/name&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/SSID&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/SSIDConfig&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;connectionType&amp;gt;ESS&amp;lt;/connectionType&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;connectionMode&amp;gt;auto&amp;lt;/connectionMode&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;MSM&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;security&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;authEncryption&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;authentication&amp;gt;WPA2PSK&amp;lt;/authentication&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;encryption&amp;gt;AES&amp;lt;/encryption&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;useOneX&amp;gt;false&amp;lt;/useOneX&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/authEncryption&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;sharedKey&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;keyType&amp;gt;passPhrase&amp;lt;/keyType&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;protected&amp;gt;false&amp;lt;/protected&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;keyMaterial&amp;gt;xxxxxxxx&amp;lt;/keyMaterial&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/sharedKey&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/security&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/MSM&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;MacRandomization xmlns=\\&quot;http://www.microsoft.com/networking/WLAN/profile/v3\\&quot;&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;enableRandomization&amp;gt;false&amp;lt;/enableRandomization&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;randomizationSeed&amp;gt;2955902897&amp;lt;/randomizationSeed&amp;gt;\\n&quot;) file.write(&quot; &amp;lt;/MacRandomization&amp;gt;\\n&quot;) file.write(&quot;&amp;lt;/WLANProfile&amp;gt;\\n&quot;) file.close() cur_path = os.getcwd() os.system(\\&#39;powershell.exe netsh wlan add profile filename=&quot;\\&#39; + cur_path + \\&#39;\\home-wifi.xml&quot;\\&#39;) os.remove(&quot;home-wifi.xml&quot;)def Run_MacOS(): file = open(&quot;home-wifi.sh&quot;,&quot;w&quot;) file.write(&quot;#!/bin/bash\\n\\nnetworksetup -setairportnetwork en0 Nerd\\ House_5G xxxxxxxx&quot;) file.close() cur_path = os.getcwd() os.system(&quot;chmod +x &quot; + cur_path + &quot;/home-wifi.sh&quot;) os.system(cur_path + &quot;/home-wifi.sh&quot;) os.remove(&quot;home-wifi.sh&quot;)def Run_Linux(): file = open(&quot;home-wifi.sh&quot;,&quot;w&quot;) file.write(&quot;#!/bin/bash\\n\\niwconfig wlan0 essid Nerd\\ House_5G key xxxxxxxx&quot;) file.close() cur_path = os.getcwd() os.system(&quot;chmod +x &quot; + cur_path + &quot;/home-wifi.sh&quot;) os.system(cur_path + &quot;/home-wifi.sh&quot;) os.remove(&quot;home-wifi.sh&quot;)cur_os = sys.platform()if cur_os == &quot;win32&quot;: Run_Windows()elif cur_os == &quot;darwin&quot;: Run_MacOS()elif cur_os == &quot;linux&quot;: Run_Linux()else print(&quot;This is an unsupported platform&quot;)Github Repo" }, { "title": "First Python Program Part 4", "url": "/posts/Py_FirstProgram_pt4/", "categories": "python", "tags": "pyinstaller", "date": "2020-04-11 18:00:00 -0500", "snippet": "DistributionOne part of software development that is the hardest is distributing your finished product to your friends, family, and hopefully customers. There are many ways to accomplish this is python but today, let&#39;s look at PyInstaller. It is a wonderful project that seeks to bundle python scripts with the interpreter and their dependencies into a executable that can be run by others without the need to install python like you did for development. Before we can use PyInstaller, we&#39;ll need to install it. This can be done by using the following command on the commandline: pip install pyinstaller. This will use the pip python package manager to install the module onto your computer. Once it is done, you&#39;ll simply need to go to the folder that your script resids in, and run the following to bundle it: pyinstaller –onefile .\\dice.py. Before running this command, your folder should look like this.After running the command, it should look like this.Now you may be asking yourself, what are all these new things? It is a perfectly reasonable question to ask, and another good question would be where is the executable? Let&#39;s just say that all of the new stuff is necessary to build the executable and go straight to the important bits. The executable is in the dist folder. You can take that file and drop it onto anyone&#39;s computer and they can use your app. They will need to use the -g flag to get the gui though. You can rewrite the app to be gui first by default and recompile the executable to make it simpler for your end users. Or you could use other programmatic solutions like system installers and shortcuts to give it the appearance of just working gui first when actually there are a number of mechanisms operating seamlessly to give such an appearance. As the programmer the choice is up to you.Github Repo" }, { "title": "First Python Program Part 3", "url": "/posts/Py_FirstProgram_pt3/", "categories": "python", "tags": "", "date": "2020-04-10 18:00:00 -0500", "snippet": "ReorganizationIn this third part, we&#39;re going to add a graphic user interface option. This is where things will leave the command line and start looking like applications that most people are accustomed to. So to start we&#39;re going to reorganize the code. This is done for 2 reasons. The first is readability and maintainability. This may sound like 2 different things, but as your projects get larger and larger, you&#39;ll find that they become very much the same thing. Ultimately what we&#39;re looking for is a balance between performance, and simplicity. As you try to optimize projects for performance, it tends to get harder to understand what is actually going on and why. Therefore we need to make sure that code remains readable so that we can reason through what is the goal that is being accomplished and how is the code going about reaching that goal. The second reason why we need to reorganize the code base is that we don&#39;t want to lose any functionality, but we don&#39;t want to needlessly waste time calling code that won&#39;t get run.So first things first. How do we start reorganizing the code? I tend to start by looking at what I want to do, and the basic structure that the application needs to run through. This is case our application will have 2 distinct paths. The first is the command line option that we&#39;ve already done. The second is the graphical user interface or gui that we want to add to it. Now both paths will still need to call our random number generator code, and we&#39;ll want to same options for both, so we&#39;ll need to add an additional command line option for rolling multiple of the same kind of dice, and one for chosing the gui option.After adding the necessary command line arguments, we need to turn some parts of out code base into functions. For example, the code that we use to generate a random number can be turned into a stand alone function so what it can be called as needed like so.def roll(sides): return random.randint(1, sides)We&#39;ll need another function to be the command line logic.def cmdcall(sides, times): count = times result = 0 while(count != 0): result += roll(sides) count = count - 1 print() print() print(result) print() print()Finally before looking at the gui code, we&#39;ll need to change the base method by which the application runs to call these new functions and others that we haven&#39;t made yet. This will go after the command line argument parser.if (gui_flag): guicall()else: cmdcall(sides, times)Graphical User InterfaceGUI&#39;s are the primary way that we interface with our computers. Fortunately for use there is one that comes with python that is a great primer for getting used to programming gui applications. There are basic components called widgets that we can use to fill the window. Some of these widgets are things like Labels, SpinBoxes, Progress Bars, and Text Boxes. The library that we&#39;ll be using is called TKinter. It is a Python only library, but it works on all platforms that Python runs on.To get started with actually building a gui application, we&#39;ll need to import the library and use 2 lines of code to get a basic blank gui. That code looks like this.from tkinter import *window = Tk()window.mainloop()Let&#39;s take a look at these lines of code. The first is an import statement, but it&#39;s a little unlike any that we&#39;ve used before. Basically we&#39;re importing all sublibraries of the main tkinter library. In the second line of code, we&#39;re initializing the base gui class and assigning it to the variable window. This is important because we&#39;ll be referencing this variable for everything that we do to build out the interface. Finally we have last line of code that actually runs the gui. Something to make note of here is a basic difference between utility software and user interface software design is this concept of a mainloop. It is literally in some cases a while loop that checks for various updates and then updates the interface until the application is closed. Everything up to this point has been finite where we start the program, it runs through a set number of instructions, and then ends. However with this loop, it can truly go forever.So now that we have this basic but empty interface, let&#39;s define a starting size for the window and put some widgets into it. We&#39;ll need 5 of them. They&#39;re going to be 2 labels (so our user knows what each option is going to do), a combobox to pick the dice that you want to roll, a spinbox to pick the number of dice that need to be rolled, and a button to trigger the rolling of the dice. It&#39;s a large code block, but ultimately each part goes like this. First part, declare the widget and give it some information. The second part is to place it on the grid based on column and row.window.geometry(\\&#39;350x80\\&#39;)sideslabel = Label(window, text=&quot;Number of Sides: &quot;)sideslabel.grid(column=0, row=0)combo = Combobox(window)combo[\\&#39;values\\&#39;]= (4, 6, 8, 10, 12, 20, 100)combo.current(5) #set the selected itemcombo.grid(column=1, row=0)timeslabel = Label(window, text=&quot;Number of times to be rolled: &quot;)timeslabel.grid(column=0, row=1)spininitvalue = IntVar()spininitvalue.set(1)spin = Spinbox(window, from_=1, to=10, width=1, textvariable=spininitvalue)spin.grid(column=1,row=1)btn = Button(window, text=&quot;Roll Dice&quot;, command=lambda: clicked(combo, spin))btn.grid(column=1, row=2)There are 2 things to point out in this code that breaks the mold. The spinbox needs an initial value. The second is that when initializing a button you need to give it a command. This command is the function that you want to be called when the button is clicked. However most functions need parameters passed to them. For the tkinter library button to have a function called with paramters, you need to declare the function as a lambda. It&#39;s a relatively unimportant thing at the moment. Just know that lambda&#39;s are a huge topic in itself. We&#39;ll explain them later as they can be incredibly useful but it is anything but simple. What remains at this point to have a functioning program is to implement the clicked function that we told the button to call. Let&#39;s take a look at that function.def clicked(combo, spin): sides = combo.get() times = int(spin.get()) result = 0 count = times while(count != 0): result += roll(int(sides)) count = count - 1 messagebox.showinfo(\\&#39;Dice Roll Results\\&#39;, \\&#39;A D\\&#39; + sides + \\&#39; was rolled \\&#39; + str(times) + \\&#39; times with a result of \\&#39; + str(result))Now when the button is clicked, the clicked function will be called. It will roll the dice with the right number of sides and the right number of times. Then it will make a message box that will tell you the dice that was rolls, the number of times that it was rolled and the sum total of the rolled dice. Because of the message box, and the combo box we need to add 2 more import statements. The reason for this is that we need to explicitly import the messagebox, and the combo box doesn&#39;t come from the root library.from tkinter import messageboxfrom tkinter.ttk import *ConclusionNow we have an application that when run with the following command: .\\dice.py -g will give us the the below application. However we can still use the command line functionality without all the need for the gui if we so chose. From here, you have the ability to build next to any application that you can imagine. There&#39;s many more topics to discuss, but these are all the basic tools that you need to be productive. Enjoy your new found powers and play responsibly.– dice.py –#!/usr/bin/env python3import randomimport argparsefrom tkinter import *from tkinter import messageboxfrom tkinter.ttk import *def roll(sides): return random.randint(1, sides)def clicked(combo, spin): sides = combo.get() times = int(spin.get()) result = 0 count = times while(count != 0): result += roll(int(sides)) count = count - 1 messagebox.showinfo(\\&#39;Dice Roll Results\\&#39;, \\&#39;A D\\&#39; + sides + \\&#39; was rolled \\&#39; + str(times) + \\&#39; times with a result of \\&#39; + str(result))def cmdcall(sides, times): count = times result = 0 while(count != 0): result += roll(sides) count = count - 1 print() print() print(result) print() print()def guicall(): window = Tk() window.title(&quot;Dice Roller&quot;) window.geometry(\\&#39;350x80\\&#39;) sideslabel = Label(window, text=&quot;Number of Sides: &quot;) sideslabel.grid(column=0, row=0) combo = Combobox(window) combo[\\&#39;values\\&#39;]= (4, 6, 8, 10, 12, 20, 100) combo.current(5) #set the selected item combo.grid(column=1, row=0) timeslabel = Label(window, text=&quot;Number of times to be rolled: &quot;) timeslabel.grid(column=0, row=1) spininitvalue = IntVar() spininitvalue.set(1) spin = Spinbox(window, from_=1, to=10, width=1, textvariable=spininitvalue) spin.grid(column=1,row=1) btn = Button(window, text=&quot;Roll Dice&quot;, command=lambda: clicked(combo, spin)) btn.grid(column=1, row=2) window.mainloop()parser = argparse.ArgumentParser()parser.add_argument(\\&#39;-s\\&#39;, \\&#39;--sides\\&#39;, default=20, choices=[4, 6, 8, 10, 12, 20, 100], type=int, help=&quot;Number of sides on the dice to be rolled&quot;)parser.add_argument(\\&#39;-t\\&#39;, \\&#39;--times\\&#39;, default=1, type=int, help=&quot;Number of dice to be rolled&quot;)parser.add_argument(\\&#39;-g\\&#39;, \\&#39;--gui\\&#39;, action=\\&#39;store_true\\&#39;)args = parser.parse_args()gui_flag = args.guisides = args.sidestimes = args.timesif (gui_flag): guicall()else: cmdcall(sides, times) Github Repo" }, { "title": "First Python Program Part 2", "url": "/posts/Py_FirstProgram_pt2/", "categories": "python", "tags": "", "date": "2020-04-07 18:00:00 -0500", "snippet": "ArgumentsWhat are arguments? Simply put they are paramters (options) that are given to the application at the time that it&#39;s called to be run. We&#39;re going to use a built in Python Library called ArgParse to implement a new feature to make this application a little more useful to anyone use plays Dungeons and Dragons. So let&#39;s take a moment to look at what ArgParse gives us, and why we need it. Passing in arguments gives our program the ability to be more flexible in it&#39;s use at runtime. For example, with our dice rolling application, DnD requires the use of 7 different dice. These are 4, 6, 8, 10, 12, 20, and 100 sided dice. However while we also want to give the user a default setting as well. This library gives us the ability to do all of this and more. It&#39;s all down to how we use it.ImplementationNow to implement a solution, we&#39;ll need to start by importing ArgParse. Fortunately it&#39;s a library that is bundled with the base install of Python, so we don&#39;t need to install it separately. Now that we have it imported, we can use the library. To use the library, we&#39;ll need to add the following code between the imports and the random number generation from the first part.parser = argparse.ArgumentParser()parser.add_argument(\\&#39;-s\\&#39;, \\&#39;--sides\\&#39;, default=20, choices=[4, 6, 8, 10, 12, 20, 100], type=int, help=&quot;Number of sides on the dice to be rolled&quot;)args = parser.parse_args()sides = args.sidesLet&#39;s look at what this code does. So the first line creates a command line parser and stores it into the variable named “parser”. Then we have the longest line of code yet that defines an argument to be searched for in all of the arguments given to the application. Now what it does with all of the parameters is set a default value of 20, names the variable and stores the value passed in at “sides”, sets a short name of “s”, sets the available options to the defined list of numbers that we need, mandates that the value be stored as an integer, and sets a help message. This is alot, but at the end of the day it is pretty much does exactly what one would think that it does. The third line of code, has the parser calling a function to actually parse the arguments given at runtime and store them into the variable args. Then we take the one stored value from args and store it in the variable “sides”. After this, you&#39;ll need to edit the random number generator code to use sides in place of 20.ConclusionOnce you make these changes, you should be able to run the application 2 different ways. The first being the default roll a 20 sided dice: ./dice.py. Then the second is by selecting a different dice either with the long name or the short name like so: ./dice.py –sides 8 or ./dice.py -s 8.– dice.py –#!/usr/bin/env python3import randomimport argparseparser = argparse.ArgumentParser()parser.add_argument(\\&#39;-s\\&#39;, \\&#39;--sides\\&#39;, default=20, choices=[4, 6, 8, 10, 12, 20, 100], type=int, help=&quot;Number of sides on the dice to be rolled&quot;)args = parser.parse_args()sides = args.sidesresult = random.randint(1, sides)print()print()print(result)print()print()Github Repo" }, { "title": "First Python Program", "url": "/posts/First_Program/", "categories": "python", "tags": "", "date": "2020-04-06 18:00:00 -0500", "snippet": "GoalEvery program starts with an idea. That idea is normally based around how to solve a problem. For the first program, it&#39;s going to sound like alot and it is. However we&#39;re going to take it in steps. So let&#39;s start with the problem. Make a program that will simulate a dice roll. In this first step, we&#39;ll make a few assumptions. Firstly we only want to roll a d20 or a 20 sided dice and output the result each time that program is run.ImplementationTo start get started, we&#39;ll need to get a blank file. Once you have that done, you&#39;ll need to put the SheBang at the top of the file. What is a SheBang you ask? It is #!/usr/bin/env python3. What does this do? It tells your computer to look at /usr/bin/env to figure out what the interpreter is to run the file. The space python3 is an argument for the program env to evalutate. All of this is the same as typing python3 ./dice.py, but instead you can just do ./dice.py. Now this SheBang is a historically Unix thing, that Windows doesn&#39;t understand, but it works on Windows too.Now you can start the actual python code. First you&#39;ll need to import the random library. Then you&#39;ll need to call the function random.randint(1, 20). The parameters that we&#39;re passing to it are 1 and 20, which are start and stop points for the random number generator. Additionally it&#39;ll need to store that into a variable. Finally output the contents of the variable with the print statement.ConclusionThis is a pretty simple idea, but we&#39;re going to build on this in the next post. However try to read through the Goal and Implementation sections, then make your own implementation and compare it to mine.– dice.py –#!/usr/bin/env python3import randomresult = random.randint(1, 20)print()print()print(result)print()print()Github Repo" }, { "title": "Functions and Classes", "url": "/posts/FunctionsAndClasses/", "categories": "python", "tags": "", "date": "2020-02-18 17:00:00 -0600", "snippet": "FunctionsProgramming can be oversimplified by saying that it is organizing repetative tasks that manipluate data into small containers. This is the point of abstractions. This particular example of abstractions is what we call a function. In Python, the keyword for declaring a function definition is “def”, followed by the name of the function, parentheses, and ending with a colon. Inside the parentheses, you can put an unlimited number of parameters. These parameters are bits of data that your function will perform operations on. You also have the ability to return one value back from a function with a “return” statement. One question that you may be asking yourself, is what go through all of this work? Why segment instructions so that you can&#39;t start at the beginning and work through to the end sequentially? The answer is both easy and difficult to answer. The short answer is that you may have the same instructions lined up the same way to perform the same task on different data multiple places in the code. If you find a bug or need to change some of these instructions later on, would you prefer to find each occurance of that code to make the same modification, or go to a function definition and modify it once? The lazy among you will go with option 2 immediately, and the rest should get used to that idea as well. The reason being is that in large code bases (this being defined in some cases and millions of lines of code) finding and modifying each and every reoccurance of what should be a function can be an impossible task. This is part of a design paradigm in programming called “Dry Programming”. The base idea is that your code base is structured such that code blocks are only written once. But that&#39;s enough explaination, let&#39;s see some example code.def add(a, b): c = a + b return cThis example is really simple. It takes the parameters, a and b, and adds them together, stores the result into the variable c, and returns it. This can be rewritten to be simpler.def add(a, b): return a + bThe eagle eye&#39;d among you will realize that I&#39;ve removed the temporary storage of the addition&#39;s result in c and just have that as returned from the function straight away. This can be done because just like in math, there is an order of operations when you have multiple things happening in the same line of code. In this particular example, the addition happens before the return statement is processed. Now let&#39;s see how we&#39;ll use this function after it has been defined.d = 5e = 3f = add(d, e)Note firstly that the variable names used in the declaration don&#39;t need to be the same as the variables passed in when the function is called. The only thing that matters is that the type of data is correct for the operations that a function needs to perform. This is something that we&#39;ve seen a little of before, but will get deeper into at a later date.ClassesClasses are the next level of organization. They are a method of controlling access to data and functions so that not everything can modify data or call functions that should only be used in particular circumstances. To define classes, it follows the same rules as a function in terms of white space rules. However using them is a little different. With classes, you need to make an instance of it. That instance has it&#39;s own data, and you can make multiple instances of the class with different data in each. For example, we can have a class of person. Each instance of person has a first and last name, and an age. However the data stored in each instance of person is different just like every real person doesn&#39;t have the same name and isn&#39;t the same age. Let&#39;s see how this class definition looks in Python code.class Person: def __init__(self, first, last, age): self.first = first self.last = last self.age = age def getFullName(self): return self.first + &quot; &quot; + self.last def getAge(self): return self.ageIn the example, we&#39;re doing a couple of things. Firstly, we start the class declaration block and give the class a name. Then we define a function called init. This is a special kind of function called a Constructor. A constructor is called anytime a new instance of a class is made. The parameters to this function are self, first, last, and age. The first parameter may look a little odd, because the idea of the keyword self, is literally that you are passing the instance of the class to itself. This isn&#39;t explicitedly necessary, but in Python 3 to use self, you need to pass it in as a parameter in the definition. This does not need to be done when you call the function as we&#39;ll see later though. Now the next bit is the important part of the constructor. It is assigning the parameters to variables inside the instance of the class. It does this by using what is called dot notation. Meaning that what is on the right of the dot is a part of the object on the left of the dot. As stated before, the names of the variables don&#39;t have to be the same, but for readability, it doesn&#39;t hurt in this instance. Next you&#39;ll see that we have 2 functions. One that returns the person&#39;s age, and one that returns the person&#39;s full name. Note that in the getFullName function, there is 2 oddities. The first is that we&#39;re adding strings together. This is permissible in Python as it interprets this form of addition as string concatenation, or combining strings together. The second is that we have to add a space or what will be returned from the function is the first and last name mashed together. No one wants that. Now let&#39;s look at how we use this class is some code.p1 = Person(&quot;Jane&quot;, &quot;Doe&quot;, &quot;26&quot;)print(p1.getFullName)The first line of the example is the creation of an instance of the Person class, and it is stored in the variable p1. The second line is a print function that writes to the screen the return statement of p1&#39;s getFullName function. Now there is a concept in most languages that pertains to classes of public and private. Each language does it a little differently but the basics are the same. A class function or variable is by default public. This means any code can call an instance&#39;s functions or modify it&#39;s variables. If you don&#39;t want the functions or variables to be able to be called or modified by code outside of the instance, then those parts of the instance need to be set to private. Now the question is how does Python do this. Well any variable or function within a class that you want to be private, add a double underscore to the name. For example this is how we would change the variables from our previous example to make them private.class Person: def __init__(self, first, last, age): self.__first = first self.__last = last self.__age = age def getFullName(self): return self.__first + &quot; &quot; + self.__last def getAge(self): return self.__age–classes.py–# defining the class named Person# it has 3 parameters that each instance of the class will need# first name, last name, and ageclass Person: def __init__(self, first, last, age): self.__first = first self.__last = last self.__age = age # declaring a public function that returns the full name of the instance of the class def getFullName(self): return self.__first + &quot; &quot; + self.__last def getAge(self): return self.__age# creating an instance of the class# we can do this as many times as we have people that we want to make a class instance forp1 = Person(&quot;Jane&quot;, &quot;Doe&quot;, 26)# prints the full name of the individualprint(p1.getFullName())print(p1.getAge())try: print(p1.__first)except: print(&quot;calling the __first variable failed&quot;)–functions.py–# define function add# parameters are a, and b. They are assumed to be numbers# the function returns the sum of the 2 parameters added togetherdef add(a, b): return a + b# running coded = 5e = 3# calls the add function and stores the result into the variable ff = add(d, e)# prints out the result stored in fprint(f)Github Repo" }, { "title": "Learning the Basics of Python", "url": "/posts/LearningPythonBasics/", "categories": "python", "tags": "", "date": "2020-02-14 17:00:00 -0600", "snippet": "What is the Goal of ProgrammingPreviously I stated that Python is basically a functional suedocode. I believe that as I have used Python for roughly 4 years on various projects. However before we start learning the language let&#39;s establish a very high level understanding of what all computer programming seeks to do. First and foremost, computers are electrified rocks that we have manipluated into having short term and long term memories, and taught to perform 3 basic types of actions at blazing speeds. Now a days that speed is on the order of billions of times per second per computer core. The 3 types of actions that we&#39;ve taught these electrified rocks to perform are arithmetic, branching, and memory management. Seeings as these are the only operations that a computer has, they are also the only operations that we as programmers have to use. So we had better understand what they are and why we need them. Arithmetic is the same 4 math operations that we were taught in elementary school such as addition, subtraction, multiplication, and division. Branching is decision making done through comparisons with commands given based on the outcome of those comparisons. Programmers will generally do this with if/else statements, and loops. Memory management is the simplest of the 3 but the most important, because at the end of the day everything that you see on your computer screen is data that is a representation of a stored number. At the smallest capacity that stored number is called a bit, a single 1 or 0. This is physically done by the computer recognizing a voltage below a predefined threshold as 0 and a voltage above that threshold as 1. Used in groups of 8, we get a byte of data. This data is known to the computer as a number based on a mathematical power of 2 but to the application using it, it could be a letter or a pointer to another group of data&#39;s location in system memory. It all depends on the context of that numbers use in a wider framework of software. So today, we&#39;re going to see how Python handles these 3 actions.ArithematicPerforming math in python isn&#39;t something that you&#39;ll do very often as you get into higher difficulty applications but for now, it will be common. Fortunately it is also incredibly easy. Simply write it out like you would a math problem on paper, and with few exceptions, you&#39;re be right. For example, to add 5 and 3, you would write 5 + 3. This will work and in the Python Interactive Shell, it will print out the answer of 8. But we need to place the answer, or result, into a variable before we can use it elsewhere. Therefore, you can write c = 5 + 3. Then the value stored at the variable c is 8. Now anytime that we want to reference this value, we simply need to use c. Likewise we can replace 5 and 3 with a and b respectively, and use them to do the same arithmetic.a = 5b = 3c = a + bPleae note that in the above code (and this is actual python code), that value assignment is always variable on the left and value on the right of the equals sign. This is a very important distinction as if you try to assign a value on the left to a variable on the right, you could get errors or very unexpected results. More over as I&#39;ve walked you through addition, subtraction, multiplication, and division work the exact same.a = 5b = 3c = a - bc = a * bc = a / bIn this example, the value of c is overwritten with each statement. Therefore if you reference c after this chunk of code runs, it will be the division of a / b, or 5 divided by 3.BranchingBranching is commonly referred to as logic. It is the process of using defined parameters to decide what the next operation performed should be. This is done through comparisons. Typically with if/else statements. For example if we wanted to validate that an addition had been done correctly and if not (else) then print out to the user that it failed, then we could use the following code.a = 5b = 4c = a + b if c == 8: print(&quot;The addition worked correctly&quot;)else: print(&quot;The addition failed&quot;)Let&#39;s walk through each step of what we just did and why. Firstly we assigned a and b to 5 and 3 respectively. Then we performed the addition of a and b, and assigned that to the variable c. Nothing new so far. However next we have an if statement, which begins with the keyword of “if” and ends with a colon. Inside of that we ca c == 8. Why is there 2 equal signs? That is done because there are 2 different types of equals. The first is assignment. The second is equality. Basically are the 2 values on either side equaliviant to one another. If so, the if statement is true and it executes whatever code is inside its code block. Otherwise it moves on and skips all the code in the code block. In this case, that would be the else statement. There are 2 things to note at this point. The first is that you do not always want or need an else statement. That is not required as part of the if statement. Additionaly on this point you may have more than 1 check to do before defaulting to the else statement. That can be done with an if else statement which in Python looks like this: elif c &amp;lt; 8:. Note that it must end in a colon, and you can even put in multiple comparisons into a single statement with the “and” and “or” keywords like so: elif c &amp;lt; 8 or c &amp;gt; 8. This brings me to the second point. A code block in many compiled languages is denoted by anything with curly braces, {}. In Python however white space matters, and a code block is denoted by being tabbed in. What that means is that after the else statement, Python would see any code not indented as being outside of the else statement&#39;s code block. This code would be run regardless of the outcome of the if/else statements and there can be as many lines of code in the code blocks as you need. However if remaining code is indented, Python will only execute it if the if/else statement chooses to run the else statement&#39;s code block. Let&#39;s see an example of what I&#39;m talking about.a = 5b = 4c = a + bif c == 8: print(&quot;This will only run if c is equal to 8.&quot;)elif c ==0: print(&quot;This will only run if c is equal to 0.&quot;)else: print(&quot;This will only run if c is not equal to 8 or 0.&quot;) print(&quot;This will always run regardless of the previous code.&quot;)There are many different types of branching operations, but the other most common branching statement is a try/catch statement. In this bracnhing operation, the computer will try to perform an action, however if an error is thrown, then it will run the catch code block instead. Let&#39;s see what that looks like.try: user_number = int(input(&quot;Please pick a number between one and ten.\\n&quot;)) except ValueError: print(&quot;You did not pick a number.&quot;)Now as you can see, “try” is the keyword to start the operation, but instead of using catch, the designers of Python decided to use the keyword “except”. Again note that both of the statements end with a colon, and their code blocks are indented to let the Python Interpreter know where they start and stop. This particular example has lot of new ideas in it, but at the core of what&#39;s happening is a request for the user to pick a number between one and ten, then if the user inputs something other than an integer, like a character or a string, or even a decimal number, it will run the exception code block. Now that we know what is intended to happen, let&#39;s see how we tell Python to do it. Inside the try code block, there are a few new keywords. The first is “int”. This is actually what&#39;s called a function because it takes the remaining code as a parameter inside a set of parentheses, but we&#39;ll talk about functions some other time. All that you need to know right now, is that int() will take the result of whatever you put inside the parentheses and output that as an integer. Therefore the variable “user_number” from the example should always be an integer by the end of this code block provided that no exceptions are thrown. Inside of int() is the “input” function. This function takes a string as a parameter, and reads in input from the user. This is the most basic interaction a program can have with a user. The string is all the text between the double quotes, and inside that string you&#39;ll notice that there is a \\n. But “what does that do?” you might ask. Simply put, it is a special class of character called an escape character. The backslash is called the escape, and signifies that the next character is special while the n stands for newline. Therefore the keystrokes that the user puts in will be on a new line in the console instead of appended to the end of the prompt. Once the user has put in their chosen number, they need to press the enter key, and the program will continue to it&#39;s execution.Memory ManagementThis last function is the easiest in Python because you&#39;ve been doing it this whole time without even thinking about it. Everytime we place a number into a variable, or assign a string to one, that is the basics of memory management. Additionally in the try/catch example, when we converted the input functions result into an integer, that was also memory management. In Python, this process is simple when compared to compiled languages, but is gets far more complex as you get more advanced with your program&#39;s complexity. For example, later on there will be variables that can only be accessed by particular means. Ultimately this is a good thing because it serves to protect data from code that shouldn&#39;t be messing with it, or ensures that data is only used in certain ways.–basic.py–var1 = &quot;Hello World&quot;print(var1)a = 5b = 3c = a + bprint(c)c = a - bprint(c)c = a * bprint(c)c = a / bprint(c)try: user_number = int(input(&quot;Please pick a number between one and ten \\n&quot;))except ValueError: print(&quot;You did not pick a number&quot;)if user_number &amp;lt; 1 or user_number &amp;gt; 10: print(&quot;You selected a number outside of the requested parameters&quot;)else: print(&quot;You selected &quot; + str(user_number))Github Repo" }, { "title": "Introduction to Python Programming", "url": "/posts/Py_Introduction/", "categories": "python", "tags": "", "date": "2020-01-31 17:00:00 -0600", "snippet": "What is PythonPython is a scripting language that is cross-platform and can be used for anything from automating small tasks to production web servers. It is a wonderfully easy language to learn and is designed to be readable. Python is basically suedocode, and it makes for quick development. In fact, I like to use it as a prove of concept to test ideas that I have. It works by running your text file with the .py extension through a parser and then an interpreter. This interpreter compiles the contents into python byte code, and then to platform specific machine code to be run on the processor. The downside of Python and why one want to use it for everything is that Python is slow and predominantly single threaded. This is because of the use of a GIL, or Global Interpreter Lock. Meaning that each instance of the Python Interpreter can only run one thread of code logic at a time. It can splice in as many of these threads as the programmer would like, but ultimately they are sharing the interpreter. Therefore if your application needs to be fast and multithreaded, then a compiled language should be used for the finished product. This type of discussion is a matter for another day.How to get PythonThe Python interpreter can be installed for your platform by going to their website. However you&#39;ll need to pick between version 2 and 3. Version 2 has been used in business projects for years and maintained to keep them from having to update their applications for version 3. However it is becoming end of life, and it is highly adviced that any new projects use version 3. Once downloaded, run the installer and you&#39;ll be ready to go. Now something to keep in mind, and this goes especially for Windows, is that you&#39;ll need to make sure that the binary is within your System Path. With the installer, there is a checkbox for it.Now that you have Python Installed, how do you use itPython comes with more than just the interpreter. It includes a shell, which allows you to type in your code line by line and see the output in real time. This can be incredibly useful as you&#39;re trying to learn the language and how it works. However once you have a .py file and are ready to test your creation, simply open a command line, terminal shell, or PowerShell and navigate to your .py file. Then run the following command: python ._your-filename_.py along with any additionally arguments that it needs. Let&#39;s get started with something simple. Create a new blank file. Name it test.py. Then in your preferred text editor, write print(“Hello World”). Then save the file and close the text editor. Finally run python .\\test.py in your terminal application and press enter. You should see a new line with the output Hello World. You&#39;ve just successfully made your first Python application. Next time, we&#39;ll make something a little more impressive than a simple hello world application, but in the meantime look up the documentation and see all the wonderful applications made using the power of Python." }, { "title": "Building Custom Profiles", "url": "/posts/PS_Profiles/", "categories": "powershell", "tags": "", "date": "2020-01-31 17:00:00 -0600", "snippet": "What is PowerShellPowerShell started life as a Windows native alternative to bash or unix shell. It was built with the also Microsoft designed .Net Framework using the C# language. It was first introduced in Windows XP. Now in 2020, we have PowerShell version 5.0 and 5.1 in Windows 10, and PowerShell Core that is crossplatform and built with .Net Core. This shell has the ability to automate nearly everything that you&#39;d like a computer to do, but in order to do that, you&#39;ll need to make yourself at home with this shell. Customization is the best part of bash and other unix shells, and everyone&#39;s shell is different. Even though they have the same pieces to start with. Likewise what you&#39;ll see here in my profiles, I have goals and actions that the profile needs to meet. You&#39;ll need to use PowerShell for awhile to see what you want from it, but my goal is to walk you through a method to setup your own customizations while following the dry programming methodology.Where to Place the ProfileWith there being 2 different versions of PowerShell and it being available on at least 3 different operating systems, file placement is paramount to getting things to work as expected. With version 5 (the Windows only version), the profile needs to be placed at ~\\Documents\\WindowsPowerShell with the name of Profile.ps1. While the Core version needs to be placed at different places depending on the operating system. Because of this I use the PowerShell profile variable of $profile to allow PowerShell to place the file where ever it needs to go for the platform I&#39;m on at the moment like so.if (!(test-path -itemtype file -path $profile)){ new-item $profile -force}This will set a blank file at the specific location for your platform. For Windows, this location is ~\\Documents\\PowerShell and the file name is Microsoft.PowerShell_profile.ps1. Why they do the naming convention like this I have no idea, but with Linux the location is ~/.config/powershell and the same file name. Please note that all of these detailed locations only place the profile file where it will be loaded under your user account. If you&#39;d like to have a profile that runs for all users on the machine please reference the Microsoft Documentation.Now that it&#39;s placed, what do I do with itFor anyone who has used and customized a Unix environment, this is easy, but for the average Windows user that doesn&#39;t need to use the command line on a daily basis, it&#39;s just a blank file and no idea what to put in it. Basically we&#39;re just going to start filling it with every custom function, alias, or module import that we want to have available everytime that you open PowerShell. This process is mostly discovery as you find more things that you want to do consistantly and easily or as you find more things that PowerShell can do. I have a blank file setup that you can download to get started here.Looking at the componentsIf you downloaded my blank profile setup, you&#39;ll notice that it is far more than one file. That is because I like to separate concerns. For example, there is a aliases.ps1, and functions.ps1. Both of these files should contain only their namesakes. This way when you need to go back and add something new or modify something, you&#39;ll have a precise place to go to. This is the base concept of maintainability and one that will save you a lot of headaches in the future. To get started, the setup is currently hard coded to be stored at ~\\Documents\\PWSH. You can change it to where ever you&#39;d like as you get more comfortable with PowerShell and how it works, but for now just place the PWSH folder into your Documents folder. Then from a powershell prompt, run the following command ~\\Documents\\PWSH\\install.ps1. This will place the PowerShell version 5.0 profile where it needs to go if you&#39;re on Windows, and the PowerShell Core profile where it needs to go. These 2 files do nothing but point back to the PWSH folder and more specifically the pwshrc.ps1. This script then imports the others at startup of a new shell. The programs.ps1, modules.ps1, and variables.ps1 files are currently set as I have them on my personal machines so that you can see what this level of automation can look like, while the aliases.ps1 and functions.ps1 files are basically blank. At the end of this article I&#39;ll have my full setup available for download as it maybe helpful to see and use a unified setup to get a feel for what is possible.My PowerShell Profile" }, { "title": "Introduction to .Net Core Programming", "url": "/posts/DNC_Introduction/", "categories": "c#", "tags": "", "date": "2020-01-31 17:00:00 -0600", "snippet": "What is .Net Core.Net Core is an extension of the .Net Framework that is designed first and formost to be cross-platform. It makes building command line programs and websites easy on the major desktop and server platforms (Windows, Linux, and MacOSX). It has recently started breaking into GUI&#39;s, or Graphic User Interface, with the introduction of WinForms to .Net Core 3.0. However this is only on Windows, and cannot be used on the other .Net Core available operating systems. There do exist other projects such as Avalonia to bridge this gap and give a single design process to make .Net Core Gui&#39;s truly cross-platform.Why should I use .Net CoreAs previously stated, .Net Core is designed and supported by Microsoft to bring a subset of the .Net Framework to all major platforms. This means that if you are a .Net Framework developer, you can get up to speed with the changes, and start building command line utilities in an afternoon. Because of the JIT, or just-in-time compiler, aspect to .Net, .Net Core gives you the ability to compile complete binaries from all the supported platforms from any of the supported platforms. Meaning that if you only have a Windows computer, you can still release binaries for Linux and MacOSX without having to maintain virtual machines or purchase dedicated hardware to run those platforms. This is unique when compared to most compiled languages such as C, C++, or until recently GoLang. Java has always had this ability, so .Net Core is by far not the first to do it. However with .Net Core being completely open source, it invites the community to mold it into the framework that they need it to be. Not just what Microsoft wants it to become.How do I get .Net CoreIt can be downloaded by going to Mircosoft directly, or their Github page. Once it&#39;s downloaded, simply run the installer and you&#39;re ready to go. If you are on Linux, I suggest adding the repository if possible so that you are always on the latest version. Instructions for this process can be found here." } ]
